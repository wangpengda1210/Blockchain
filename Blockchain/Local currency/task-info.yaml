type: edu
custom_name: stage6
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import blockchain.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 13) {
                throw new BlockParseException("Every block should " +
                    "contain at least 13 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).contains("gets 100 VC")) {
                throw new BlockParseException("Third line of every block " +
                    "should contain \"gets 100 VC\"");
            }

            if (!lines.get(3).startsWith("Id:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(4).startsWith("Timestamp:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(5).startsWith("Magic number:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(5).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(6).equals("Hash of the previous block:")) {
                throw new BlockParseException("7-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(8).equals("Hash of the block:")) {
                throw new BlockParseException("9-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(7).strip();
            String hash = lines.get(9).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(10).startsWith("Block data:")) {
                throw new BlockParseException("11-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {
        public BlockchainTest() {
            super(Main.class);
        }

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 15) {
                return new CheckResult(false,
                    "In this stage you should output 15 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/StringUtil.java
  visible: true
  text: |
    package blockchain;

    import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;

    class StringUtil {
        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input) {
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes(StandardCharsets.UTF_8));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if (hex.length() == 1) {
                        hexString.append('0');
                    }
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/blockchain/GenerateKeys.java
  visible: true
  text: |
    package blockchain;

    import java.security.*;

    public class GenerateKeys {

        private final KeyPairGenerator keyGen;
        private PrivateKey privateKey;
        private PublicKey publicKey;

        public GenerateKeys(int keyLength) throws NoSuchAlgorithmException {
            this.keyGen = KeyPairGenerator.getInstance("RSA");
            this.keyGen.initialize(keyLength);
        }

        public void createKeys() {
            KeyPair keyPair = this.keyGen.generateKeyPair();
            this.privateKey = keyPair.getPrivate();
            this.publicKey = keyPair.getPublic();
        }

        public PublicKey getPublicKey() {
            return publicKey;
        }

        public PrivateKey getPrivateKey() {
            return privateKey;
        }

    }
  learner_created: true
- name: src/blockchain/Miner.java
  visible: true
  text: |
    package blockchain;

    import java.util.concurrent.Callable;

    public class Miner implements Callable<BlockChain.Block> {

        int id;
        BlockChain blockChain;

        public Miner(int id, BlockChain blockChain) {
            this.id = id;
            this.blockChain = blockChain;
        }

        @Override
        public BlockChain.Block call() {
            BlockChain.Block block;
            if (blockChain.getLastBlock() == null) {
                block = new BlockChain.Block("0", id);
            } else {
                block = new BlockChain.Block(blockChain.getLastBlock().getHash(), id);
            }
            return block;
        }

    }
  learner_created: true
- name: src/blockchain/SerializationUtils.java
  visible: true
  text: |
    package blockchain;

    import java.io.*;

    class SerializationUtils {

        public static final String FILE_DIR = "blockchain.db";

        /**
         * Serialize the given object to the file
         */
        public static void serialize(Object obj, String fileName) throws IOException {
            FileOutputStream fos = new FileOutputStream(fileName);
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            ObjectOutputStream oos = new ObjectOutputStream(bos);
            oos.writeObject(obj);
            oos.close();
        }

        /**
         * Deserialize to an object from the file
         */
        public static Object deserialize(String fileName) throws IOException, ClassNotFoundException {
            FileInputStream fis = new FileInputStream(fileName);
            BufferedInputStream bis = new BufferedInputStream(fis);
            ObjectInputStream ois = new ObjectInputStream(bis);
            Object obj = ois.readObject();
            ois.close();
            return obj;
        }
    }
  learner_created: true
- name: src/blockchain/SignatureUtil.java
  visible: true
  text: |
    package blockchain;

    import java.security.*;

    public class SignatureUtil {

        public static byte[] sign(String data, PrivateKey privateKey) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
            Signature rsa = Signature.getInstance("SHA1withRSA");
            rsa.initSign(privateKey);
            rsa.update(data.getBytes());
            return rsa.sign();
        }

        public static boolean verify(String data, byte[] signature, PublicKey publicKey) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
            Signature sig = Signature.getInstance("SHA1withRSA");
            sig.initVerify(publicKey);
            sig.update(data.getBytes());

            return sig.verify(signature);
        }

    }
  learner_created: true
- name: src/blockchain/BlockChain.java
  visible: true
  text: |
    package blockchain;

    import java.io.Serializable;
    import java.security.InvalidKeyException;
    import java.security.NoSuchAlgorithmException;
    import java.security.SignatureException;
    import java.time.Duration;
    import java.time.LocalDateTime;
    import java.util.ArrayList;
    import java.util.Date;
    import java.util.Random;

    public class BlockChain implements Serializable {

        private static final long serialVersionUID = 1L;

        private Block firstBlock;
        private Block lastBlock;
        private static int startZeros = 0;
        private static int messageId = 0;

        private static final ArrayList<Message> messages = new ArrayList<>();

        public BlockChain() {
        }

        static class Block implements Serializable {

            static int lastIndex = 1;

            private final int id;
            private final long timeStamp;
            private final String previousHash;
            private Block nextBlock;
            private int magicNumber;
            private final long generationTime;
            private final int creator;
            private final ArrayList<Message> blockData;
            private String increaseMessage;
            private boolean increase = false;
            private boolean decrease = false;

            public Block(String previousHash, int creator) {
                LocalDateTime startTime = LocalDateTime.now();

                id = lastIndex;
                timeStamp = new Date().getTime();
                this.previousHash = previousHash;
                nextBlock = null;

                Random random = new Random();
                magicNumber = 0;
                while (!getHash().startsWith("0".repeat(startZeros))) {
                    if (Thread.currentThread().isInterrupted()) {
                        break;
                    }
                    magicNumber = Math.abs(random.nextInt());
                }

                this.creator = creator;

                blockData = new ArrayList<>();

                generationTime = Duration.between(startTime, LocalDateTime.now())
                        .toSeconds();

                if (generationTime < 5) {
                    increase = true;
                } else if (generationTime > 20) {
                    decrease = true;
                }

            }

            public String getHash() {
                return StringUtil.applySha256(id + String.valueOf(timeStamp)
                        + previousHash + magicNumber);
            }

            public Block getNextBlock() {
                return nextBlock;
            }

            public void setNextBlock(Block nextBlock) {
                this.nextBlock = nextBlock;
            }

            @Override
            public String toString() {

                StringBuilder sb = new StringBuilder("Block:\n")
                        .append("Created by miner # ").append(creator).append("\n")
                        .append("Id: ").append(id).append("\n")
                        .append("Timestamp: ").append(timeStamp).append("\n")
                        .append("Magic number: ").append(magicNumber).append("\n")
                        .append("Hash of the previous block: \n").append(previousHash)
                        .append("\n" + "Hash of the block: \n").append(getHash())
                        .append("\n").append("Block data: ");

                if (blockData.isEmpty()) {
                    sb.append("no messages\n");
                } else {
                    sb.append("\n");
                    for (Message data : blockData) {
                        sb.append(data.getText()).append("\n");
                    }
                }

                sb.append("Block was generating for ").append(generationTime)
                        .append(" seconds\n").append(increaseMessage);

                return sb.toString();

            }

        }

        public void addBlock(Block block) {
            if (firstBlock == null) {
                firstBlock = block;
                lastBlock = firstBlock;
            } else {
                lastBlock.setNextBlock(block);
                lastBlock = lastBlock.getNextBlock();
            }

            if (block.decrease) {
                startZeros--;
                block.increaseMessage = "N was decrease by 1";
            } else if (block.increase) {
                startZeros++;
                block.increaseMessage = "N was increased to " + startZeros;
            } else {
                block.increaseMessage = "N stays the same";
            }

            block.blockData.addAll(messages);
            messages.clear();

            Block.lastIndex++;
        }

        public boolean validate() throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
            Block currentBlock = firstBlock;

            while (currentBlock.nextBlock != null) {
                if (currentBlock.getHash().equals(currentBlock.nextBlock.previousHash)) {
                    for (Message message : currentBlock.blockData) {
                        if (!SignatureUtil.verify(message.getText() + message.getId(),
                                message.getSignature(), message.getPublicKey()) ||
                                message.getId() > messageId) {
                            return false;
                        }
                    }
                    currentBlock = currentBlock.nextBlock;
                } else {
                    return false;
                }
            }

            return true;
        }

        public Block getLastBlock() {
            return lastBlock;
        }

        public void addMessage(Message message) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
            if (SignatureUtil.verify(message.getText() + message.getId(),
                    message.getSignature(), message.getPublicKey()) &&
                    message.getId() <= messageId) {
                messages.add(message);
            }
        }

        public synchronized static int getMessageId() {
            messageId++;
            return messageId;
        }

    }
  learner_created: true
- name: src/blockchain/Message.java
  visible: true
  text: |
    package blockchain;

    import java.io.Serializable;
    import java.security.*;

    public class Message implements Serializable {

        private final int id;
        private final String text;
        private final PublicKey publicKey;
        private final byte[] signature;

        public Message(String text, GenerateKeys generateKeys) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
            id = BlockChain.getMessageId();
            this.text = text;
            generateKeys.createKeys();
            this.publicKey = generateKeys.getPublicKey();
            this.signature = SignatureUtil.sign(this.text + id, generateKeys.getPrivateKey());
        }

        public int getId() {
            return id;
        }

        public PublicKey getPublicKey() {
            return publicKey;
        }

        public byte[] getSignature() {
            return signature;
        }

        public String getText() {
            return text;
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/276/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 02 Jan 2021 02:03:13 UTC
record: -1
